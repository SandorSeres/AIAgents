Utility Module Documentation

## Overview

The `util.py` file contains various utility functions and classes used in an AI-based application. These include logging setup, YAML configuration loading, agent creation, cost calculation, and markdown conversion to Facebook format. The utilities support core operations, enabling effective management of agents and their interactions within the system.

**Author:** Sandor Seres (sseres@code.hu)  
**Date:** 2024-08-31  
**Version:** 1.0  
**License:** Creative Commons Zero v1.0 Universal  

## Functions and Classes

### Function: `setup_logging()`

**Description:**  
Sets up the logging configuration for the application. Logs are written to both the console and a file named 'app.log'. The logging format includes timestamps, log level, logger name, message, and source file with line number.

### Function: `load_yaml(file_path)`

**Description:**  
Loads and parses a YAML configuration file, replacing environment variables.

**Parameters:**  
- `file_path (str)`: The path to the YAML file.

**Returns:**  
- `dict`: The parsed YAML file as a dictionary with environment variables substituted.

**Logs:**  
- Info: On successful loading of the YAML file.  
- Error: If there is an issue loading or parsing the YAML file.

### Function: `create_agent(role_name, agent_config)`

**Description:**  
Creates an agent based on the provided configuration. Supports `HumanAgent` and `CAMELAgent` types.

**Parameters:**  
- `role_name (str)`: The name of the role for the agent.  
- `agent_config (dict)`: Configuration details for the agent, including its type and associated tools.

**Returns:**  
- `Object`: An instance of the created agent.

**Logs:**  
- Info: On successful creation of the agent.  
- Error: If there is an issue during the creation of the agent.

### Function: `extract_json_string(text)`

**Description:**  
Extracts a JSON string from a block of text.

**Parameters:**  
- `text (str)`: The text containing the JSON string.

**Returns:**  
- `str`: The extracted JSON string, or an empty JSON object if extraction fails.

**Logs:**  
- Warning: If there is an error during JSON extraction.

### Function: `parse_user_instruction(instruction)`

**Description:**  
Parses a user instruction, extracting and returning the JSON content.

**Parameters:**  
- `instruction (str)`: The instruction text containing JSON data.

**Returns:**  
- `dict`: The parsed JSON data.

**Logs:**  
- Info: On successful parsing of the user instruction.  
- Warning: If there is an error during JSON parsing.

### Function: `calculate_costs(usage_metrics, model_input_price, model_output_price, unit_of_tokens)`

**Description:**  
Calculates and logs the cost of an AI model's usage based on token consumption.

**Parameters:**  
- `usage_metrics (object)`: The usage metrics object containing token counts.  
- `model_input_price (float)`: The cost per unit of input tokens.  
- `model_output_price (float)`: The cost per unit of output tokens.  
- `unit_of_tokens (int)`: The number of tokens per unit for pricing.

**Logs:**  
- Info: When costs are successfully calculated and saved.  
- Error: If there is an issue during cost calculation.

### Function: `markdown_to_facebook(text)`

**Description:**  
Converts markdown text to a format suitable for posting on Facebook, handling various HTML elements and formatting.

**Parameters:**  
- `text (str)`: The markdown text to be converted.

**Returns:**  
- `str`: The text converted to Facebook format.

**Logs:**  
- Info: When the conversion is successful.  
- Error: If there is an issue during the conversion process.

## Examples

### Basic Usage

```python
# Setup logging for the application
setup_logging()

# Load a YAML configuration file
config = load_yaml("config.yaml")

# Create an agent using the loaded configuration
agent = create_agent("HumanAgent", config['agents']['HumanAgent'])

# Calculate costs based on usage metrics
calculate_costs(usage_metrics, model_input_price=0.01, model_output_price=0.02, unit_of_tokens=1000)

# Convert markdown text to Facebook format
facebook_text = markdown_to_facebook("## Hello World\nThis is a **test**.")
```

### Typical Use Cases

1. **Logging Setup**: Use `setup_logging()` to initialize logging for the application.
2. **Configuration Loading**: Load YAML configuration files using `load_yaml()` to manage agent settings.
3. **Agent Creation**: Create agents dynamically based on configuration using `create_agent()`.
4. **Cost Calculation**: Calculate and log costs associated with AI model usage using `calculate_costs()`.
5. **Markdown Conversion**: Convert markdown text to a Facebook-friendly format using `markdown_to_facebook()`.

### Expected Outputs

- Successful logging setup will create an `app.log` file for application logs.
- Loading a YAML file will return a dictionary representation of the configuration.
- Creating an agent will return an instance of the specified agent type.
- Cost calculations will log the costs to the console and append them to a CSV file.
- Markdown conversion will return a string formatted for Facebook posts.

