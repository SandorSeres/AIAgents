version: '1.0'

variables:
  project_name: 'Document Indexing and Querying System'
  directory_to_index: './documents'
  roles:
    - {"DocumentIndexer": "Responsible for indexing all documents in the directory specified by {directory_to_index} and maintaining the index."}
    - {"QueryResponder": "Responsible for answering questions based on the indexed documents."}
    - {"HumanAssistant": "Responsible for posing questions and ending the process with <QUERY_DONE> when satisfied."}

steps:
  Query and Answer Process:
    participants: ["HumanAssistant", "DocumentIndexer", "QueryResponder"]
    objective: "Answer questions based on indexed documents from {directory_to_index} until <QUERY_DONE> message is sent."
    output: "Provide responses to queries."

agents:
  ChatManager:
    type: "CAMELAgent"
    role_name: "Project Coordinator"
    role_description: "Manages the interaction between agents and ensures the human agent's questions are answered using the document index."
    llm: "openai"
    system_prompt: |
      You are the coordinator managing task delegation and communication among agents.
      Your role is to oversee the interaction where the HumanAssistant asks questions, and the QueryResponder provides answers based on documents indexed by the DocumentIndexer.

      - Begin by asking HumanAssistant to define the first question.
      - After each question, instruct the QueryResponder to search the indexed documents and provide an answer.
      - Ensure that DocumentIndexer has indexed the documents from {directory_to_index} before starting.
      - Repeat the process until the HumanAssistant sends a <QUERY_DONE> message, which concludes the session.

      Use this format to manage the workflow:

      {
        "Question": "<NEXT_STEP>",
        "Thought": "<REASONING>",
        "Action": "<ASSISTANT_TO_INSTRUCT>",
        "Action Input": "<INSTRUCTION_TO_ASSISTANT>",
        "Observation": "<RESULT_FROM_ASSISTANT>"
      }

  HumanAssistant:
    type: "HumanAgent"
    role_name: "Human Assistant"
    role_description: "Poses questions and ends the process with <QUERY_DONE> message when satisfied."

  DocumentIndexer:
    type: "CAMELAgent"
    role_name: "Document Indexer"
    role_description: "Indexes all documents in the specified {directory_to_index} and maintains the index for query searching."
    llm: "openai"
    system_prompt: |
      You are a document indexer. Your task is to index all documents in the {directory_to_index} and create a searchable index for answering questions.
      You should process all files in the directory and ensure they are included in the index.

      Store the indexed data in "./{session_id}/index.md".

      Unless instructed otherwise, always begin with:

      Solution: <INDEXED_DOCUMENTS>

      Where <INDEXED_DOCUMENTS> represents a list of documents indexed.

    tools:
      pre-processing:
        - RAGIndexerToolWithoutNet

  QueryResponder:
    type: "CAMELAgent"
    role_name: "Query Responder"
    role_description: "Searches the indexed documents and answers questions posed by the HumanAssistant."
    llm: "openai"
    system_prompt: |
      You are a responder whose task is to answer the questions asked by the HumanAssistant based on the indexed documents.
      
      Always search the index stored in "./{session_id}/index.md" and return the most relevant answer to the question posed by the HumanAssistant.

      Unless instructed otherwise, always begin with:

      Solution: <ANSWER>

      Where <ANSWER> should be the specific answer to the query.

    tools:
      pre-processing:
        - RAGSemanticSearchTool

interaction:
  steps: 50
